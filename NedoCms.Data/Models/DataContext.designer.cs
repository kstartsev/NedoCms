#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1008
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NedoCms.Data.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="pageeditor")]
	public partial class EditorDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPageMetadata(PageMetadata instance);
    partial void UpdatePageMetadata(PageMetadata instance);
    partial void DeletePageMetadata(PageMetadata instance);
    partial void InsertPage(Page instance);
    partial void UpdatePage(Page instance);
    partial void DeletePage(Page instance);
    partial void InsertPageContent(PageContent instance);
    partial void UpdatePageContent(PageContent instance);
    partial void DeletePageContent(PageContent instance);
    partial void InsertSharedContent(SharedContent instance);
    partial void UpdateSharedContent(SharedContent instance);
    partial void DeleteSharedContent(SharedContent instance);
    #endregion
		
		public EditorDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EditorDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EditorDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EditorDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PageMetadata> PageMetadatas
		{
			get
			{
				return this.GetTable<PageMetadata>();
			}
		}
		
		public System.Data.Linq.Table<Page> Pages
		{
			get
			{
				return this.GetTable<Page>();
			}
		}
		
		public System.Data.Linq.Table<PageContent> PageContents
		{
			get
			{
				return this.GetTable<PageContent>();
			}
		}
		
		public System.Data.Linq.Table<SharedContent> SharedContents
		{
			get
			{
				return this.GetTable<SharedContent>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PageMetadatas")]
	public partial class PageMetadata : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _PageId;
		
		private string _Key;
		
		private string _Value;
		
		private EntityRef<Page> _Page;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnPageIdChanging(System.Guid value);
    partial void OnPageIdChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public PageMetadata()
		{
			this._Page = default(EntityRef<Page>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PageId
		{
			get
			{
				return this._PageId;
			}
			set
			{
				if ((this._PageId != value))
				{
					if (this._Page.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPageIdChanging(value);
					this.SendPropertyChanging();
					this._PageId = value;
					this.SendPropertyChanged("PageId");
					this.OnPageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Page_PageMetadata", Storage="_Page", ThisKey="PageId", OtherKey="Id", IsForeignKey=true)]
		public Page Page
		{
			get
			{
				return this._Page.Entity;
			}
			set
			{
				Page previousValue = this._Page.Entity;
				if (((previousValue != value) 
							|| (this._Page.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Page.Entity = null;
						previousValue.PageMetadatas.Remove(this);
					}
					this._Page.Entity = value;
					if ((value != null))
					{
						value.PageMetadatas.Add(this);
						this._PageId = value.Id;
					}
					else
					{
						this._PageId = default(System.Guid);
					}
					this.SendPropertyChanged("Page");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pages")]
	public partial class Page : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Title;
		
		private string _Master;
		
		private string _MenuLabel;
		
		private int _MenuOrder;
		
		private bool _Visible;
		
		private string _Route;
		
		private System.Nullable<System.Guid> _ParentId;
		
		private string _FullRoute;
		
		private short _Type;
		
		private EntitySet<PageMetadata> _PageMetadatas;
		
		private EntitySet<Page> _Children;
		
		private EntitySet<PageContent> _PageContents;
		
		private EntityRef<Page> _Parent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnMasterChanging(string value);
    partial void OnMasterChanged();
    partial void OnMenuLabelChanging(string value);
    partial void OnMenuLabelChanged();
    partial void OnMenuOrderChanging(int value);
    partial void OnMenuOrderChanged();
    partial void OnVisibleChanging(bool value);
    partial void OnVisibleChanged();
    partial void OnRouteChanging(string value);
    partial void OnRouteChanged();
    partial void OnParentIdChanging(System.Nullable<System.Guid> value);
    partial void OnParentIdChanged();
    partial void OnFullRouteChanging(string value);
    partial void OnFullRouteChanged();
    partial void OnTypeChanging(short value);
    partial void OnTypeChanged();
    #endregion
		
		public Page()
		{
			this._PageMetadatas = new EntitySet<PageMetadata>(new Action<PageMetadata>(this.attach_PageMetadatas), new Action<PageMetadata>(this.detach_PageMetadatas));
			this._Children = new EntitySet<Page>(new Action<Page>(this.attach_Children), new Action<Page>(this.detach_Children));
			this._PageContents = new EntitySet<PageContent>(new Action<PageContent>(this.attach_PageContents), new Action<PageContent>(this.detach_PageContents));
			this._Parent = default(EntityRef<Page>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Master", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Master
		{
			get
			{
				return this._Master;
			}
			set
			{
				if ((this._Master != value))
				{
					this.OnMasterChanging(value);
					this.SendPropertyChanging();
					this._Master = value;
					this.SendPropertyChanged("Master");
					this.OnMasterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuLabel", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string MenuLabel
		{
			get
			{
				return this._MenuLabel;
			}
			set
			{
				if ((this._MenuLabel != value))
				{
					this.OnMenuLabelChanging(value);
					this.SendPropertyChanging();
					this._MenuLabel = value;
					this.SendPropertyChanged("MenuLabel");
					this.OnMenuLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuOrder", DbType="Int NOT NULL")]
		public int MenuOrder
		{
			get
			{
				return this._MenuOrder;
			}
			set
			{
				if ((this._MenuOrder != value))
				{
					this.OnMenuOrderChanging(value);
					this.SendPropertyChanging();
					this._MenuOrder = value;
					this.SendPropertyChanged("MenuOrder");
					this.OnMenuOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visible", DbType="Bit NOT NULL")]
		public bool Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Route", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Route
		{
			get
			{
				return this._Route;
			}
			set
			{
				if ((this._Route != value))
				{
					this.OnRouteChanging(value);
					this.SendPropertyChanging();
					this._Route = value;
					this.SendPropertyChanged("Route");
					this.OnRouteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullRoute", DbType="nvarchar(2056) not null", CanBeNull=false)]
		public string FullRoute
		{
			get
			{
				return this._FullRoute;
			}
			set
			{
				if ((this._FullRoute != value))
				{
					this.OnFullRouteChanging(value);
					this.SendPropertyChanging();
					this._FullRoute = value;
					this.SendPropertyChanged("FullRoute");
					this.OnFullRouteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="tinyint not null")]
		public short Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Page_PageMetadata", Storage="_PageMetadatas", ThisKey="Id", OtherKey="PageId")]
		public EntitySet<PageMetadata> PageMetadatas
		{
			get
			{
				return this._PageMetadatas;
			}
			set
			{
				this._PageMetadatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Page_Page", Storage="_Children", ThisKey="Id", OtherKey="ParentId")]
		public EntitySet<Page> Children
		{
			get
			{
				return this._Children;
			}
			set
			{
				this._Children.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Page_PageContent", Storage="_PageContents", ThisKey="Id", OtherKey="PageId")]
		public EntitySet<PageContent> PageContents
		{
			get
			{
				return this._PageContents;
			}
			set
			{
				this._PageContents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Page_Page", Storage="_Parent", ThisKey="ParentId", OtherKey="Id", IsForeignKey=true)]
		public Page Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				Page previousValue = this._Parent.Entity;
				if (((previousValue != value) 
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.Children.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.Children.Add(this);
						this._ParentId = value.Id;
					}
					else
					{
						this._ParentId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PageMetadatas(PageMetadata entity)
		{
			this.SendPropertyChanging();
			entity.Page = this;
		}
		
		private void detach_PageMetadatas(PageMetadata entity)
		{
			this.SendPropertyChanging();
			entity.Page = null;
		}
		
		private void attach_Children(Page entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_Children(Page entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
		
		private void attach_PageContents(PageContent entity)
		{
			this.SendPropertyChanging();
			entity.Page = this;
		}
		
		private void detach_PageContents(PageContent entity)
		{
			this.SendPropertyChanging();
			entity.Page = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PageContents")]
	public partial class PageContent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _PageId;
		
		private string _PlaceHolder;
		
		private string _Content;
		
		private int _Order;
		
		private string _Settings;
		
		private System.Nullable<System.Guid> _SharedContentId;
		
		private EntityRef<Page> _Page;
		
		private EntityRef<SharedContent> _SharedContent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnPageIdChanging(System.Guid value);
    partial void OnPageIdChanged();
    partial void OnPlaceHolderChanging(string value);
    partial void OnPlaceHolderChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    partial void OnSettingsChanging(string value);
    partial void OnSettingsChanged();
    partial void OnSharedContentIdChanging(System.Nullable<System.Guid> value);
    partial void OnSharedContentIdChanged();
    #endregion
		
		public PageContent()
		{
			this._Page = default(EntityRef<Page>);
			this._SharedContent = default(EntityRef<SharedContent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PageId
		{
			get
			{
				return this._PageId;
			}
			set
			{
				if ((this._PageId != value))
				{
					if (this._Page.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPageIdChanging(value);
					this.SendPropertyChanging();
					this._PageId = value;
					this.SendPropertyChanged("PageId");
					this.OnPageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaceHolder", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string PlaceHolder
		{
			get
			{
				return this._PlaceHolder;
			}
			set
			{
				if ((this._PlaceHolder != value))
				{
					this.OnPlaceHolderChanging(value);
					this.SendPropertyChanging();
					this._PlaceHolder = value;
					this.SendPropertyChanged("PlaceHolder");
					this.OnPlaceHolderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Settings", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Settings
		{
			get
			{
				return this._Settings;
			}
			set
			{
				if ((this._Settings != value))
				{
					this.OnSettingsChanging(value);
					this.SendPropertyChanging();
					this._Settings = value;
					this.SendPropertyChanged("Settings");
					this.OnSettingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SharedContentId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SharedContentId
		{
			get
			{
				return this._SharedContentId;
			}
			set
			{
				if ((this._SharedContentId != value))
				{
					if (this._SharedContent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSharedContentIdChanging(value);
					this.SendPropertyChanging();
					this._SharedContentId = value;
					this.SendPropertyChanged("SharedContentId");
					this.OnSharedContentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Page_PageContent", Storage="_Page", ThisKey="PageId", OtherKey="Id", IsForeignKey=true)]
		public Page Page
		{
			get
			{
				return this._Page.Entity;
			}
			set
			{
				Page previousValue = this._Page.Entity;
				if (((previousValue != value) 
							|| (this._Page.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Page.Entity = null;
						previousValue.PageContents.Remove(this);
					}
					this._Page.Entity = value;
					if ((value != null))
					{
						value.PageContents.Add(this);
						this._PageId = value.Id;
					}
					else
					{
						this._PageId = default(System.Guid);
					}
					this.SendPropertyChanged("Page");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SharedContent_PageContent", Storage="_SharedContent", ThisKey="SharedContentId", OtherKey="Id", IsForeignKey=true)]
		public SharedContent SharedContent
		{
			get
			{
				return this._SharedContent.Entity;
			}
			set
			{
				SharedContent previousValue = this._SharedContent.Entity;
				if (((previousValue != value) 
							|| (this._SharedContent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SharedContent.Entity = null;
						previousValue.PageContents.Remove(this);
					}
					this._SharedContent.Entity = value;
					if ((value != null))
					{
						value.PageContents.Add(this);
						this._SharedContentId = value.Id;
					}
					else
					{
						this._SharedContentId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("SharedContent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SharedContents")]
	public partial class SharedContent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _Content;
		
		private System.DateTime _CreationDate;
		
		private System.DateTime _ModificationDate;
		
		private EntitySet<PageContent> _PageContents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnModificationDateChanging(System.DateTime value);
    partial void OnModificationDateChanged();
    #endregion
		
		public SharedContent()
		{
			this._PageContents = new EntitySet<PageContent>(new Action<PageContent>(this.attach_PageContents), new Action<PageContent>(this.detach_PageContents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModificationDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModificationDate
		{
			get
			{
				return this._ModificationDate;
			}
			set
			{
				if ((this._ModificationDate != value))
				{
					this.OnModificationDateChanging(value);
					this.SendPropertyChanging();
					this._ModificationDate = value;
					this.SendPropertyChanged("ModificationDate");
					this.OnModificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SharedContent_PageContent", Storage="_PageContents", ThisKey="Id", OtherKey="SharedContentId")]
		public EntitySet<PageContent> PageContents
		{
			get
			{
				return this._PageContents;
			}
			set
			{
				this._PageContents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PageContents(PageContent entity)
		{
			this.SendPropertyChanging();
			entity.SharedContent = this;
		}
		
		private void detach_PageContents(PageContent entity)
		{
			this.SendPropertyChanging();
			entity.SharedContent = null;
		}
	}
}
#pragma warning restore 1591
